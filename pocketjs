#!/bin/bash
args=("$@")
if [ "$1" = "forever" ]; then
    if [ "$2" = "" ]; then
        printf "invalid name \n"
        exit 1
    fi
    if [ "$3" = "" ]; then
        printf "invalid command \n"
        exit 1
    fi
    if [ -d "$2" ]; then
    	printf "application '$2' already exists \n"
    else
        mkdir $2
        echo "$3" > "$2/cmd.txt"
    	nohup $3 > $2/log.txt 2>&1&
    	echo $! > "$2/pid.txt"
        echo "$2" > "$2/name.txt"
        printf "application '$2' created \n"
    fi
elif [ "$1" = "pid" ]; then
    if [ -d "$2" ]; then
        if [ -e "$2/pid.txt" ]; then
        	pid=`cat $2/pid.txt`
        	echo $pid
        else
            printf "PID file for application '$2' does not exist \n"
        fi
    else
        printf "application '$2' does not exist \n"
    fi
elif [ "$1" = "log" ]; then
    if [ -d "$2" ]; then
        if [ -e "$2/log.txt" ]; then
        	log=`cat $2/log.txt`
        	printf "$log\n"
        else
            printf "LOG file for application '$2' does not exist \n"
        fi
    else
        printf "application '$2' does not exist \n"
    fi
elif [ "$1" = "cmd" ]; then
    if [ -d "$2" ]; then
        if [ -e "$2/cmd.txt" ]; then
        	cmd=`cat $2/cmd.txt`
        	echo $cmd
        else
            printf "CMD file for application '$2' does not exist \n"
        fi
    else
        printf "application '$2' does not exist \n"
    fi
elif [ "$1" = "never" ]; then
    if [ -d "$2" ]; then
        if [ -e "$2/cmd.txt" ]; then
            if [ -e "$2/pid.txt" ]; then
            	cmd=`cat $2/cmd.txt`
            	pid=`cat $2/pid.txt`
                running=`ps -p $pid -o command=`
                if [ "$running" = "" ]; then
                    # perhaps a different message
                    printf "application '$2' is not running on process $pid \n"
                elif [ "$running" != "$cmd" ]; then
                    printf "application '$2' is not running on process $pid \n"
                else
                    kill -9 $pid
                    printf "SIGKILL sent to process $pid \n"
                fi
            else
            	printf "PID file for application '$2' does not exist \n"
            fi
        else
            printf "CMD file for application '$2' does not exist \n"
        fi
    else
        printf "application '$2' does not exist \n"
    fi
elif [ "$1" = "cleanup" ]; then
    if [ -d "$2" ]; then
        if [ -e "$2/log.txt" ]; then
            rm $2/log.txt
        else
            printf "LOG file for application '$2' does not exist \n"
        fi
        if [ -e "$2/pid.txt" ]; then
            rm $2/pid.txt
        else
            printf "PID file for application '$2' does not exist \n"
        fi
        if [ -e "$2/cmd.txt" ]; then
            rm $2/cmd.txt
        else
            printf "CMD file for application '$2' does not exist \n"
        fi
        if [ -e "$2/name.txt" ]; then
            rm $2/name.txt
        else
            printf "NAME file for application '$2' does not exist \n"
        fi
        if [ -e "$2/temp.txt" ]; then
            rm $2/temp.txt
        fi
        rm -Rf $2
        printf "application '$2' deleted \n"
    else
        printf "Application '$2' does not exist \n"
    fi
elif [ "$1" = "utility" ]; then
    numeric='^[0-9]+$'
    while [ true ]; do
        clear
        printf "\e[1mpocketjs utility\e[0m \n\n"
        printf " applications \n"
        printf " \e[4m  #        name               PID       running      \e[0m \n"
        num=1
        declare -a applicationDirs
        declare -a applicationNames
        for d in ./*/
        do
            if [ -e "$d/pid.txt" ] && [ -e "$d/log.txt" ] && [ -e "$d/cmd.txt" ] && [ -e "$d/name.txt" ]; then
                applicationDirs[(($num-1))]=$d
                name=`cat $d/name.txt`
                applicationNames[(($num-1))]=$name
                pid=`cat $d/pid.txt`
                printf "   $num        "
                for i in `seq 0 17`;
                do
                    char=${name:$i:1}
                    if [ "$char" = "" ]; then
                        printf " "
                    else
                        printf "$char"
                    fi
                done
                for i in `seq 0 10`;
                do
                    char=${pid:$i:1}
                    if [ "$char" = "" ]; then
                        printf " "
                    else
                        printf "$char"
                    fi
                done
                cmd=`cat $d/cmd.txt`
                running=`ps -p $pid -o command=`
                if [ "$running" != "" ] && [ "$running" = "$cmd" ]; then
                    printf "yes"
                else
                    printf "no"
                fi
                printf "\n"
                ((num++))
            fi
        done
        if [ "$num" = "1" ]; then
            printf "  no applications \n"
        fi
        printf "\n"
        printf " options \n"
        printf "   a. refresh list \n"
        printf "   b. new application \n"
        printf "   #. manage application \n"
        printf "   x. quit \n"
        while [ true ]; do
            printf " choice: "
            read choice
            if [ "$choice" = "a" ] || [ "$choice" = "b" ] || [ "$choice" = "x" ]; then
                break
            elif [[ $choice =~ $numeric ]]; then
                if [ $choice -gt 0 ] && [ $choice -lt $num ]; then
                    break
                fi
            fi
            printf " invalid choice \n"
        done
        if [ "$choice" = "a" ]; then
            continue
        elif [ "$choice" = "b" ]; then
            printf " new application \n"
            newname=""
            while [ true ]; do
                printf "     name: "
                read newname
                if [ "$newname" != "" ]; then
                    break
                fi
                printf " invalid name \n"
            done
            newcmd=""
            while [ true ]; do
                printf "     command: "
                read newcmd
                if [ "$newcmd" != "" ]; then
                    break
                fi
                printf " invalid command \n"
            done
            msg=`$0 forever "$newname" "$newcmd"`
            printf " $msg \n"
            printf " hit enter to continue "
            read next
        elif [ "$choice" = 'x' ]; then
            exit 1
        else
            dir=${applicationDirs[(($choice-1))]}
            name=${applicationNames[(($choice-1))]}
            if [ -e "$dir/pid.txt" ] && [ -e "$dir/log.txt" ] && [ -e "$dir/cmd.txt" ] && [ -e "$dir/name.txt" ]; then
                run=true
                while [ "$run" = "true" ]; do
                    clear
                    printf "\e[1mpocketjs utility\e[0m \n\n"
                    printf " managing application #$choice \n\n"
                    pid=`cat $dir/pid.txt`
                    cmd=`cat $dir/cmd.txt`
                    printf " APP: $name \n"
                    printf " PID: $pid \n"
                    echo " CMD: $cmd "; printf "\n"
                    printf "\n options: \n"
                    printf "   a. read logs \n"
                    printf "   b. check status \n"
                    printf "   c. stop app \n"
                    printf "   d. delete app \n"
                    printf "   e. restart app \n"
                    printf "   f. duplicate app \n"
                    printf "   x. back \n"
                    while [ true ]; do
                        printf " choice: "
                        read choice2
                        if [ "$choice2" = "a" ]; then
                            printf "\n"
                            logs=`$0 log $name`
                            printf "LOG: \n $logs \n\n"
                        elif [ "$choice2" = "b" ]; then
                            printf "\n"
                            running=`ps -p $pid -o command=`
                            if [ "$running" != "" ] && [ "$running" = "$cmd" ]; then
                                printf " app is running on PID $pid"
                            else
                                printf " app is NOT running on PID $pid"
                            fi
                            printf "\n"
                        elif [ "$choice2" = "c" ]; then
                            never=`$0 never $name`
                            printf "\n $never \n"
                        elif [ "$choice2" = "d" ]; then
                            cleanup=`$0 cleanup $name`
                            printf "\n $cleanup \n"
                            run=false
                        elif [ "$choice2" = "e" ]; then
                            printf "\n"
                            never=`$0 never $name`
                            cleanup=`$0 cleanup $name`
                            forever=`$0 forever $name "$cmd"`
                            printf " stop: $never \n"
                            printf " delete: $cleanup \n"
                            printf " start: $forever \n"
                        elif [ "$choice2" = "f" ]; then
                            newname=""
                            while [ true ]; do
                                printf "     duplicate name: "
                                read newname
                                if [ "$newname" != "" ]; then
                                    break
                                fi
                                printf " invalid name \n"
                            done
                            forever=`$0 forever $newname "$cmd"`
                            printf " \n $forever \n"
                        elif [ "$choice2" = "x" ]; then
                            break 2
                        else
                            printf " invalid choice \n"
                            continue
                        fi
                        break
                    done
                    printf " \n hit enter to continue "
                    read next
                done
            else
                printf " application does not exist \n"
                printf " hit enter to continue "
                read next
            fi
        fi
    done
elif [ "$1" = "help" ]; then
    printf "pocketjs help \n"
    printf "    pocketjs utility \n"
    printf "        run utility for managing pocketjs apps \n"
    printf "    pocketjs forever {name} {command} \n"
    printf "        background a pocketjs script \n"
    printf "        name = name for app \n"
    printf "        command = 'php /absolute/path/to/pocketjs_server_script.php' \n"
    printf "    pocketjs never {name} \n"
    printf "        stop a running pocketjs app \n"
    printf "        name = name of app \n"
    printf "    pocketjs cleanup {name} \n"
    printf "        clean up files of a stopped pocketjs app \n"
    printf "        name = name of app \n"
    printf "    pocketjs pid {name} \n"
    printf "        get PID of a pocketjs app \n"
    printf "        name = name of app \n"
    printf "    pocketjs log {name} \n"
    printf "        get logs of a pocketjs app \n"
    printf "        name = name of app \n"
    printf "    pocketjs help \n"
    printf "        view possible operations \n"
else
    echo "invalid argument (run 'pocketjs help' for help)"
fi
