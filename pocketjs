#!/bin/bash
args=("$@")
if [ "$1" = "forever" ]; then
    if [ "$2" = "" ]; then
        printf "Invalid name \n"
        exit 1
    fi
    if [ "$3" = "" ]; then
        printf "Invalid command \n"
        exit 1
    fi
    if [ -d "$2" ]; then
    	printf "Application '$2' already running \n"
    else
        mkdir $2
        echo "$3" > "$2/cmd.txt"
    	nohup $3 > $2/log.txt 2>&1&
    	echo $! > "$2/pid.txt"
        echo "$2" > "$2/name.txt"
    fi
elif [ "$1" = "pid" ]; then
    if [ -d "$2" ]; then
        if [ -e "$2/pid.txt" ]; then
        	pid=`cat $2/pid.txt`
        	echo $pid
        else
            printf "PID file for application '$2' does not exist \n"
        fi
    else
        printf "Application '$2' does not exist \n"
    fi
elif [ "$1" = "log" ]; then
    if [ -d "$2" ]; then
        if [ -e "$2/log.txt" ]; then
        	log=`cat $2/log.txt`
        	printf "$log\n"
        else
            printf "LOG file for application '$2' does not exist \n"
        fi
    else
        printf "Application '$2' does not exist \n"
    fi
elif [ "$1" = "cmd" ]; then
    if [ -d "$2" ]; then
        if [ -e "$2/cmd.txt" ]; then
        	cmd=`cat $2/cmd.txt`
        	echo $cmd
        else
            printf "CMD file for application '$2' does not exist \n"
        fi
    else
        printf "Application '$2' does not exist \n"
    fi
elif [ "$1" = "never" ]; then
    if [ -d "$2" ]; then
        if [ -e "$2/pid.txt" ]; then
        	pid=`cat $2/pid.txt`
        	kill -9 $pid
            printf "SIGKILL sent to process $pid \n"
        else
        	printf "PID file for application '$2' does not exist \n"
        fi
    else
        printf "Application '$2' does not exist \n"
    fi
elif [ "$1" = "cleanup" ]; then
    if [ -d "$2" ]; then
        if [ -e "$2/log.txt" ]; then
            rm $2/log.txt
        else
            printf "LOG file for application '$2' does not exist \n"
        fi
        if [ -e "$2/pid.txt" ]; then
            rm $2/pid.txt
        else
            printf "PID fil for application '$2' does not exist \n"
        fi
        if [ -e "$2/cmd.txt" ]; then
            rm $2/cmd.txt
        else
            printf "CMD file for application '$2' does not exist \n"
        fi
        if [ -e "$2/name.txt" ]; then
            rm $2/name.txt
        else
            printf "NAME file for application '$2' does not exist \n"
        fi
        if [ -e "$2/temp.txt" ]; then
            rm $2/temp.txt
        fi
        rm -Rf $2
    else
        printf "Application '$2' does not exist \n"
    fi
elif [ "$1" = "utility" ]; then
    numeric='^[0-9]+$'
    while [ true ]; do
        clear
        printf "\e[1mpocketjs utility\e[0m \n\n"
        printf " applications \n"
        printf " \e[4m  #        name               PID       running      \e[0m \n"
        num=1
        declare -a applicationDirs
        declare -a applicationNames
        for d in ./*/
        do
            if [ -e "$d/pid.txt" ] && [ -e "$d/log.txt" ] && [ -e "$d/cmd.txt" ] && [ -e "$d/name.txt" ]; then
                applicationDirs[(($num-1))]=$d
                name=`cat $d/name.txt`
                applicationNames[(($num-1))]=$name
                pid=`cat $d/pid.txt`
                printf "   $num        "
                for i in `seq 0 17`;
                do
                    char=${name:$i:1}
                    if [ "$char" = "" ]; then
                        printf " "
                    else
                        printf "$char"
                    fi
                done
                for i in `seq 0 8`;
                do
                    char=${pid:$i:1}
                    if [ "$char" = "" ]; then
                        printf " "
                    else
                        printf "$char"
                    fi
                done
                kill -0 $pid > $d/temp.txt 2>&1&
                temp=`cat $d/temp.txt`
                if [ -z "$temp" ]; then
                    printf "yes"
                else
                    printf "no"
                fi
                if [ -e "$d/temp.txt" ]; then
                    rm $d/temp.txt
                fi
                printf "\n"
                ((num++))
            fi
        done
        if [ "$num" = "1" ]; then
            printf "  no applications \n"
        fi
        printf "\n"
        printf " options \n"
        printf "   a. refresh list \n"
        printf "   b. new application \n"
        printf "   #. manage application \n"
        printf "   x. quit \n"
        while [ true ]; do
            printf "     choice: "
            read choice
            if [ "$choice" = "a" ] || [ "$choice" = "b" ] || [ "$choice" = "x" ]; then
                break
            elif [[ $choice =~ $numeric ]]; then
                if [ $choice -gt 0 ] && [ $choice -lt $num ]; then
                    break
                fi
            fi
            printf " invalid choice \n"
        done
        if [ "$choice" = "a" ]; then
            continue
        elif [ "$choice" = "b" ]; then
            printf "new application \n"
            # new application
            break
        elif [ "$choice" = 'x' ]; then
            exit 1
        else
            printf "manage application $choice \n"
            # manage application
            break
        fi
    done
elif [ "$1" = "help" ]; then
    printf "pocketjs help \n"
    printf "    'pocketjs utility' - run utility for managing pocketjs applications \n"
    printf "    'pocketjs forever {command} {name}' - background a pocketjs script \n"
    printf "        command = 'php /absolute/path/to/pocketjs_server_script.php' \n"
    printf "        name = name for pocketjs application \n"
    printf "    'pocketjs never {name}' - stop a pocketjs script backgrounded by 'pocketjs forever' \n"
    printf "        name = name of backgrounded pocketjs application \n"
    printf "    'pocketjs cleanup {name}' - clean up log and PID files of a pocketjs script stopped by 'pocketjs never' \n"
    printf "        name = name of backgrounded pocketjs application \n"
    printf "    'pocketjs pid {name}' - get the PID of a pocketjs script backgrounded by 'pocketjs forever' \n"
    printf "        name = name of backgrounded pocketjs application \n"
    printf "    'pocketjs log {name}' - get the logs of a pocketjs script backgrounded by 'pocketjs forever' \n"
    printf "        name = name of backgrounded pocketjs application \n"
    printf "    'pocketjs help' - view possible operations \n"
else
    echo "Invalid Argument: (run 'pocketjs help' for help)"
fi
