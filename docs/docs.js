function getDocsSource() { return {"open": "# open()\nRun the pocket server.  \nBinds the pocket server to the configured IP/port, begins listening for new clients.  \nThen, in an infinite loop:\n  1. Watches for new clients and new data from clients\n  2. Verifies and adds new clients\n  3. Calls `onRun()` event\n  4. Parses new data from clients and calls corresponding events\n  5. Removes disconnected clients\n\n## Return Value\nvoid\n", "construct": "# &lowbar;&lowbar;construct($d, $p, $mc, $bt, $n/$v)\nConstructor for a pocket.  \nRuns when a pocket object is constructed with `new Pocket(...)`. Configures the pocket.\n\n## Parameters\n  - `string $d` \u2013 internal IP address of server\n  - `int $p` \u2013 server port to bind to pocket\n  - `int $mc` \u2013 max number of clients allowed to connect\n  - `int $bt` \u2013 pocket blocking timeout (milliseconds)\n     - Amount of time that pocket waits for a client to connect or send data\n     - Use `null` if application requires the pocket to wait indefinitely for new clients or new data from clients\n        - Most common, usually most efficient\n     - Use `0` if application requires pocket to loop indefinitely without waiting (unprompted by clients)\n     - Use a number if application requires pocket to loop indefinitely with a small wait (unprompted by clients)\n  - `string $n` or `bool $v` \u2013 either the application name or the verbose logging option\n     - Use a string to supply the application name, which is used in logging to the console\n     - Use `false` to turn off logging to the console altogether\n     - Use `true` to keep logging on, with `LOG` instead of an application name\n\n## Return Value\nvoid\n", "destruct": "# &lowbar;&lowbar;destruct()\nDestructor for a pocket.  \nRuns when a pocket object is destroyed. Closes all connections.\n\n## Return Value\nvoid\n", "getting-started": "# Getting Started\n", "demos": "# Demos\n", "cmd-line": "# Command Line Utility\n"}; }